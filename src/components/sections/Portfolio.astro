---
// Portfolio.astro - Final Version with improved filtering
// All styles are in src/styles/globals.css
import { supabase } from '../../lib/supabase';
import type { ProjectWithCategory, Category } from '../../lib/database.types';

let categories: Category[] = [];
let projects: any[] = [];
let fetchError: string | null = null;

try {
    const { data: cats, error: catErr } = await supabase.from('categories').select('*').order('name');
    if (catErr) throw catErr;
    categories = cats || [];

    const { data: projs, error: projErr } = await supabase.from('projects')
        .select('*, categories(name, slug)')
        .eq('is_published', true)
        .order('display_order', { ascending: true })
        .order('created_at', { ascending: false });
    if (projErr) throw projErr;
    projects = projs || [];

} catch (e: any) {
    console.error("Supabase fetch error (on page load):", e.message);
    fetchError = e.message;

    // Fallback to empty if fetch fails
    categories = [];
    projects = [];
}
---

<section id="portfolio" class="portfolio-section">
  <div class="container">
    <div class="text-center section-header">
      <h2 class="heading-2">Our Work</h2>
      <p class="text-xl text-neutral-600 max-w-2xl mx-auto">Recent projects showcasing our creative solutions.</p>
    </div>

    {fetchError ? (
      <p class="text-center text-red-500 mb-4">Error loading projects from Supabase: {fetchError}<br/>Please check Codespace network or Supabase connection. (No projects are currently loaded.)</p>
    ) : (
        <div class="category-filter-buttons" id="category-filters">
          <button class="filter-button active" data-slug="all">All</button>
          {categories.map((cat) => (
            <button class="filter-button" data-slug={cat.slug}>{cat.name}</button>
          ))}
        </div>
    )}

    {projects.length === 0 && !fetchError ? (
      <p class="text-center text-neutral-500 text-lg">No projects found. Use the Admin panel to add your first project!</p>
    ) : (
      <div id="portfolio-grid" class="portfolio-grid">
        {projects.map((project) => (
          <div class="project-card" data-category={project.categories?.slug || 'uncategorized'}>
             {project.image_url ? <img src={project.image_url} alt={project.title} class="project-img" /> : <div class="no-image">No Image</div>}
             <div class="project-info">
                 <h3>{project.title}</h3>
                 <span>{project.categories?.name || 'Uncategorized'}</span>
             </div>
             <p class="project-description">{project.description}</p>
          </div>
        ))}
      </div>
    )}
  </div>
</section>

<script client:load>
    console.log('--- Portfolio Filter Script Init ---');

    // Function to setup filters and attach event listeners
    function setupPortfolioFilters() {
        console.log('Portfolio filter script loaded and attempting to attach listeners.');

        const filtersContainer = document.getElementById('category-filters');
        const filterButtons = filtersContainer ? filtersContainer.querySelectorAll('.filter-button') : [];
        const portfolioGrid = document.getElementById('portfolio-grid');

        if (!filterButtons.length || !portfolioGrid) {
            console.warn('Portfolio filter buttons or grid not found. Filtering script cannot fully initialize.');
            return;
        }

        filterButtons.forEach(button => {
            // Ensure existing listeners are removed to prevent duplicates
            button.removeEventListener('click', handleFilterClick);
            button.addEventListener('click', handleFilterClick);
        });

        function handleFilterClick(event: Event) {
            const clickedButton = event.currentTarget as HTMLElement;
            const selectedSlug = clickedButton.dataset.slug;

            console.log('Filter button clicked:', selectedSlug);

            filterButtons.forEach(btn => btn.classList.remove('active'));
            clickedButton.classList.add('active');

            portfolioGrid.querySelectorAll('.project-card').forEach(card => {
                const cardElement = card as HTMLElement;
                const cardCategory = cardElement.dataset.category;

                console.log(`Card: ${cardCategory}, Selected: ${selectedSlug}`);

                if (selectedSlug === 'all' || cardCategory === selectedSlug) {
                    cardElement.style.display = 'block';
                } else {
                    cardElement.style.display = 'none';
                }
            });
        }
        console.log('--- Portfolio Filter Script Attached ---');
    }

    // Ensure the script runs only when the document is ready
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        setupPortfolioFilters();
    } else {
        document.addEventListener('DOMContentLoaded', setupPortfolioFilters); // Fallback for timing issues
    }
</script>
