---
// src/components/ui/GlareHover.astro
// Adapted from https://reactbits.dev/get-started/glare-hover
// Props for customization
interface Props {
  width?: string;
  height?: string;
  background?: string;
  borderRadius?: string;
  borderColor?: string;
  glareColor?: string;
  glareOpacity?: number;
  glareAngle?: number;
  glareSize?: number;
  transitionDuration?: number;
  playOnce?: boolean;
  className?: string;
  style?: Record<string, string>;
}

const {
  width = '100%', // Changed default to 100% for cards
  height = '100%', // Changed default to 100% for cards
  background = 'transparent', // Use transparent as card will have its own bg
  borderRadius = '0.5rem', // Match project card border radius
  borderColor = 'transparent', // Transparent border, as cards have shadow
  glareColor = '#ffffff',
  glareOpacity = 0.3, // Slightly reduced default opacity for subtlety
  glareAngle = -45,
  glareSize = 250,
  transitionDuration = 650,
  playOnce = false,
  className = '',
  style = {}
} = Astro.props;

// Helper function to convert hex to rgba (same as in original JS)
const hexToRgba = (hexColor: string, opacity: number): string => {
  const hex = hexColor.replace('#', '');
  if (/^[0-9A-Fa-f]{6}$/.test(hex)) {
    const r = parseInt(hex.slice(0, 2), 16);
    const g = parseInt(hex.slice(2, 4), 16);
    const b = parseInt(hex.slice(4, 6), 16);
    return `rgba(${r}, ${g}, ${b}, ${opacity})`;
  } else if (/^[0-9A-Fa-f]{3}$/.test(hex)) {
    const r = parseInt(hex[0] + hex[0], 16);
    const g = parseInt(hex[1] + hex[1], 16);
    const b = parseInt(hex[2] + hex[2], 16);
    return `rgba(${r}, ${g}, ${b}, ${opacity})`;
  }
  return hexColor; // Return original if not valid hex
};

const rgbaColor = hexToRgba(glareColor, glareOpacity);

// CSS variables passed to the style attribute
const cssVars = {
  '--gh-width': width,
  '--gh-height': height,
  '--gh-bg': background,
  '--gh-br': borderRadius,
  '--gh-angle': `${glareAngle}deg`,
  '--gh-duration': `${transitionDuration}ms`,
  '--gh-size': `${glareSize}%`,
  '--gh-rgba': rgbaColor,
  '--gh-border': borderColor
};
---

<div
  class:list={['glare-hover', playOnce ? 'glare-hover--play-once' : '', className]}
  style={{ ...cssVars, ...style }}
>
  <slot /> {/* Renders content passed into the component */}
</div>

<style>
  .glare-hover {
    width: var(--gh-width);
    height: var(--gh-height);
    background: var(--gh-bg);
    border-radius: var(--gh-br);
    border: 1px solid var(--gh-border);
    overflow: hidden;
    position: relative;
    display: grid;
    place-items: center; /* For centering children if needed */
  }

  .glare-hover::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(
      var(--gh-angle),
      hsla(0, 0%, 0%, 0) 60%,
      var(--gh-rgba) 70%,
      hsla(0, 0%, 0%, 0),
      hsla(0, 0%, 0%, 0) 100%
    );
    transition: var(--gh-duration) ease;
    background-size:
      var(--gh-size) var(--gh-size),
      100% 100%;
    background-repeat: no-repeat;
    background-position:
      -100% -100%,
      0 0;
  }

  .glare-hover:hover {
    /* cursor: pointer; <-- Not needed, parent <a> makes it clickable */
  }

  .glare-hover:hover::before {
    background-position:
      100% 100%,
      0 0;
  }

  .glare-hover--play-once::before {
    transition: none;
  }

  .glare-hover--play-once:hover::before {
    transition: var(--gh-duration) ease;
    background-position:
      100% 100%,
      0 0;
  }
</style>