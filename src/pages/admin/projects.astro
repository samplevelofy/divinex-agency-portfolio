---
// admin/projects.astro - List all projects from Supabase
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase.ts';
import { getOptimizedImageUrl } from '../../lib/utils.ts';
import type { ProjectWithCategory } from '../../../lib/database.types';

let projects: ProjectWithCategory[] = [];
let fetchError: string | null = null;

try {
    const { data, error } = await supabase
        .from('projects')
        .select('*, categories(name, slug)')
        .order('display_order', { ascending: true })
        .order('created_at', { ascending: false });

    if (error) throw error;
    projects = data || [];

} catch (e: any) {
    console.error("Admin Projects Fetch Error:", e.message);
    fetchError = e.message;
    projects = []; // Fallback to empty array if fetch fails
}
---

<Layout title="Manage Projects">
    <section class="admin-dashboard-section">
        <div class="container admin-dashboard-container">
            <h1 class="heading-2 text-center mb-xl">Manage Projects</h1>
            <p class="text-center text-neutral-600 mb-lg">
                Add, edit, or delete your agency's portfolio projects.
            </p>

            {fetchError && (
                <div class="auth-message auth-message-error mb-xl">
                    Error loading projects from Supabase: {fetchError}<br/>
                    (Please ensure Supabase keys are correct and your Codespace network is active.)
                </div>
            )}

            <div class="admin-actions-header">
                <a href="/admin/dashboard" class="btn-secondary btn-small">
                    <i class="fa-solid fa-arrow-left"></i> Back to Dashboard
                </a>
                <a href="/admin/projects/new" class="btn-add-new">
                    <i class="fa-solid fa-plus"></i> Add New Project
                </a>
            </div>

            {projects.length === 0 && !fetchError ? (
                <p class="text-center text-neutral-600">No projects found. Click "Add New Project" to get started!</p>
            ) : (
                <table class="admin-projects-table" id="admin-projects-table"> {/* <--- Added ID for JS targeting */}
                    <thead>
                        <tr>
                            <th>Order</th>
                            <th>Image</th>
                            <th>Title</th>
                            <th>Category</th>
                            <th>Published</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {projects.map(project => (
                            <tr key={project.id}>
                                <td>{project.display_order}</td>
                                <td>
                                    <img
                                        src={getOptimizedImageUrl(project.image_url)}
                                        alt={project.title}
                                        class="thumbnail-preview"
                                    />
                                </td>
                                <td>{project.title}</td>
                                <td>{project.categories?.name || 'N/A'}</td>
                                <td>{project.is_published ? 'Yes' : 'No'}</td>
                                <td class="admin-actions">
                                    <a href={`/admin/projects/${project.id}/edit`} class="btn-small btn-edit">Edit</a>
                                    <button
                                        class="btn-small btn-delete"
                                        data-project-id={project.id}
                                        data-project-title={project.title}
                                        type="button" {/* <--- IMPORTANT: Changed to type="button" to prevent form submission if embedded in form unexpectedly */}
                                    >
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
        </div>
    </section>

    <script client:load> {/* <--- ADDED client:load directive */}
        console.log("Admin Projects client script loaded.");

        document.addEventListener('astro:page-load', setupDeleteListeners); // For Astro's view transitions
        document.addEventListener('DOMContentLoaded', setupDeleteListeners); // For initial page load

        function setupDeleteListeners() {
            console.log("Setting up delete listeners for admin projects table.");
            const projectsTable = document.getElementById('admin-projects-table');

            if (!projectsTable) {
                console.warn('Admin projects table not found for delete listeners.');
                return;
            }

            // Use event delegation on the table
            projectsTable.removeEventListener('click', handleTableClick); // Prevent duplicate listeners
            projectsTable.addEventListener('click', handleTableClick);

            async function handleTableClick(event: Event) {
                const target = event.target as HTMLElement;
                
                if (target.classList.contains('btn-delete')) {
                    const button = target; // The clicked delete button
                    const projectId = button.dataset.projectId;
                    const projectTitle = button.dataset.projectTitle;

                    if (!projectId) {
                        alert('Error: Project ID not found.');
                        return;
                    }

                    if (confirm(`Are you sure you want to delete project "${projectTitle}"? This cannot be undone.`)) {
                        try {
                            const adminPassword = prompt("Please enter admin password to confirm deletion:");
                            if (!adminPassword) {
                                alert("Deletion cancelled. Admin password is required.");
                                return;
                            }

                            const deleteApiUrl = `${window.location.origin}/api/admin/projects/delete`;
                            console.log('Attempting to delete project via ABSOLUTE URL:', deleteApiUrl, 'with ID:', projectId);

                            const response = await fetch(deleteApiUrl, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ id: projectId, adminPassword }),
                            });

                            if (response.ok) {
                                alert(`Project "${projectTitle}" deleted successfully.`);
                                window.location.reload(); // Reload page to update list
                            } else {
                                const errorData = await response.json();
                                alert(`Failed to delete project: ${errorData.error}`);
                            }
                        } catch (error) {
                            console.error('Delete project network error:', error);
                            alert('An unexpected error occurred during deletion.');
                        }
                    }
                }
            }
        }
        // Call on initial load if DOM is already ready
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            setupDeleteListeners();
        }
    </script>
</Layout>