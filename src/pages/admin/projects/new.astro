---
// admin/projects/new.astro - Form to create a new project
import Layout from '../../../layouts/Layout.astro';
import { supabase } from '../../../lib/supabase.ts';
import type { Category } from '../../../lib/database.types';
import { getOptimizedImageUrl } from '../../../lib/utils.ts';

// Fetch categories for the dropdown
let categories: Category[] = [];
let categoriesError: string | null = null;
try {
    const { data, error } = await supabase.from('categories').select('*').order('name');
    if (error) throw error;
    categories = data || [];
} catch (e: any) {
    console.error("Error fetching categories for new project form:", e.message);
    categoriesError = e.message;
}

let message = '';
let messageType: 'success' | 'error' = 'error';

if (Astro.request.method === 'POST') {
    try {
        const formData = await Astro.request.formData();
        
        const title = formData.get('title')?.toString();
        const description = formData.get('description')?.toString();
        const imageFile = formData.get('image') as File;
        const category_id = formData.get('category_id')?.toString();
        const is_published = formData.get('is_published') === 'on';
        const display_order = formData.get('display_order')?.toString();

        if (!title) throw new Error('Title is required.');

        let imageUrl: string | null = null;

        // --- Image Upload Logic ---
        if (imageFile && imageFile.size > 0) {
            // <--- CHANGE START: Use Astro.url.origin to create absolute URL
            const uploadApiUrl = `${Astro.url.origin}/api/admin/projects/upload`;
            console.log('Attempting image upload to ABSOLUTE URL:', uploadApiUrl);
            // <--- CHANGE END
            const uploadFormData = new FormData();
            uploadFormData.append('file', imageFile);

            const uploadResponse = await fetch(uploadApiUrl, {
                method: 'POST',
                body: uploadFormData,
            });

            if (!uploadResponse.ok) {
                const errorData = await uploadResponse.json();
                throw new Error(`Image upload failed: ${errorData.error}`);
            }
            const uploadResult = await uploadResponse.json();
            imageUrl = uploadResult.url;
            console.log('Image uploaded successfully. URL:', imageUrl);
        }
        // --- End Image Upload Logic ---

        const projectData = {
            title,
            description,
            image_url: imageUrl,
            category_id: category_id === '' ? null : category_id,
            is_published,
            display_order: display_order ? parseInt(display_order) : 0,
        };

        // <--- CHANGE START: Use Astro.url.origin to create absolute URL
        const createProjectApiUrl = `${Astro.url.origin}/api/admin/projects/create`;
        console.log('Attempting to create project via ABSOLUTE URL:', createProjectApiUrl, 'with data:', projectData);
        // <--- CHANGE END
        const response = await fetch(createProjectApiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(projectData),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Failed to create project: ${errorData.error}`);
        }

        message = 'Project created successfully!';
        messageType = 'success';
        console.log('Project created successfully. Redirecting...');
        return Astro.redirect('/admin/projects');

    } catch (error: any) {
        console.error("Create Project Form Error:", error.message);
        message = error.message;
        messageType = 'error';
    }
}
---

<Layout title="Add New Project">
    <section class="admin-dashboard-section">
        <div class="container project-form-container">
            <h1 class="heading-2 text-center mb-xl">Add New Project</h1>
            <p class="text-center text-neutral-600 mb-lg">Fill out the details for your new portfolio project.</p>

            {categoriesError && (
                <div class="auth-message auth-message-error mb-xl">
                    Error loading categories: {categoriesError}<br/>
                    (Please ensure Supabase keys are correct and your Codespace network is active.)
                </div>
            )}

            {message && (
                <div class:list={['form-status-message', messageType === 'error' ? 'form-status-error' : 'form-status-success']}>
                    {message}
                </div>
            )}

            <form method="POST" class="mt-xl" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="title" class="form-label">Project Title *</label>
                    <input type="text" id="title" name="title" required class="form-input" value="" placeholder="e.g., Brand Identity for Acme Corp">
                </div>

                <div class="form-group">
                    <label for="description" class="form-label">Description</label>
                    <textarea id="description" name="description" class="form-textarea" placeholder="Detailed description of the project..."></textarea>
                </div>

                <div class="form-group">
                    <label for="category_id" class="form-label">Category</label>
                    <select id="category_id" name="category_id" class="form-select">
                        <option value="">-- Select Category --</option>
                        {categories.map(category => (
                            <option value={category.id}>{category.name}</option>
                        ))}
                    </select>
                </div>

                <div class="form-group">
                    <label for="image" class="form-label">Project Image</label>
                    <input type="file" id="image" name="image" accept="image/*" class="form-input">
                </div>

                <div class="form-group">
                    <label for="display_order" class="form-label">Display Order</label>
                    <input type="number" id="display_order" name="display_order" value="0" class="form-input">
                </div>

                <div class="checkbox-group">
                    <input type="checkbox" id="is_published" name="is_published" class="form-checkbox">
                    <label for="is_published">Publish Project</label>
                </div>

                <button type="submit" class="btn-primary-full-width mt-xl">Create Project</button>
                <a href="/admin/projects" class="btn-secondary mt-md btn-full-width text-center" style="display: block; margin-top: var(--spacing-md);">Cancel</a>
            </form>
        </div>
    </section>
</Layout>