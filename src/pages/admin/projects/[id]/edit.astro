---
// admin/projects/[id]/edit.astro - Form to edit an existing project
import Layout from '../../../../layouts/Layout.astro';
import { supabase } from '../../../../lib/supabase.ts';
import { getOptimizedImageUrl } from '../../../../lib/utils.ts';
import type { Project, Category } from '../../../../lib/database.types';

const { id } = Astro.params; // Get project ID from URL

let project: Project | null = null;
let categories: Category[] = [];
let fetchError: string | null = null;

// Fetch project and categories on page load (server-side)
try {
    const { data: projectData, error: projectError } = await supabase
        .from('projects')
        .select('*')
        .eq('id', id)
        .single();

    if (projectError) throw projectError;
    project = projectData;

    const { data: categoriesData, error: categoriesError } = await supabase
        .from('categories')
        .select('*')
        .order('name');
    if (categoriesError) throw categoriesError;
    categories = categoriesData || [];

} catch (e: any) {
    console.error("Edit Project Fetch Error:", e.message);
    fetchError = e.message;
}

let message = '';
let messageType: 'success' | 'error' = 'error';

if (Astro.request.method === 'POST') {
    try {
        const formData = await Astro.request.formData();
        
        const title = formData.get('title')?.toString();
        const description = formData.get('description')?.toString();
        const category_id = formData.get('category_id')?.toString();
        const is_published = formData.get('is_published') === 'on';
        const display_order = formData.get('display_order')?.toString();

        if (!title) throw new Error('Title is required.');

        let imageUrl: string | null = formData.get('existing_image_url')?.toString() || null; // Start with existing image URL

        // --- Image Upload Logic ---
        const fileInput = formData.get('image') as File;
        if (fileInput && fileInput.size > 0) { // Check if a new file was uploaded
            // <--- CHANGE START: Use Astro.url.origin to create absolute URL
            const uploadApiUrl = `${Astro.url.origin}/api/admin/projects/upload`;
            console.log('Attempting image upload for edit to ABSOLUTE URL:', uploadApiUrl);
            // <--- CHANGE END
            const uploadFormData = new FormData();
            uploadFormData.append('file', fileInput);

            const uploadResponse = await fetch(uploadApiUrl, {
                method: 'POST',
                body: uploadFormData,
            });

            if (!uploadResponse.ok) {
                const errorData = await uploadResponse.json();
                throw new Error(`Image upload failed: ${errorData.error}`);
            }
            const uploadResult = await uploadResponse.json();
            imageUrl = uploadResult.url; // Use the newly uploaded URL
            console.log('Image uploaded successfully for edit. URL:', imageUrl);
        }
        // --- End Image Upload Logic ---

        const projectData = {
            id, // Project ID from Astro.params
            title,
            description,
            image_url: imageUrl,
            category_id: category_id === '' ? null : category_id,
            is_published,
            display_order: display_order ? parseInt(display_order) : 0,
        };

        // <--- CHANGE START: Use Astro.url.origin to create absolute URL
        const updateProjectApiUrl = `${Astro.url.origin}/api/admin/projects/update`;
        console.log('Attempting to update project via ABSOLUTE URL:', updateProjectApiUrl, 'with data:', projectData);
        // <--- CHANGE END
        const response = await fetch(updateProjectApiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(projectData),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Failed to update project: ${errorData.error}`);
        }

        message = 'Project updated successfully!';
        messageType = 'success';
        console.log('Project updated successfully.');
        // Optionally redirect after success
        // return Astro.redirect('/admin/projects');

    } catch (error: any) {
        console.error("Edit Project Form Error:", error.message);
        message = error.message;
        messageType = 'error';
    }
}
---

<Layout title="Edit Project">
    <section class="admin-dashboard-section">
        <div class="container project-form-container">
            <h1 class="heading-2 text-center mb-xl">Edit Project</h1>
            <p class="text-center text-neutral-600 mb-lg">Modify the details for your portfolio project.</p>

            {fetchError && (
                <div class="auth-message auth-message-error mb-xl">
                    Error loading project or categories: {fetchError}<br/>
                    (Please ensure Supabase keys are correct and your Codespace network is active.)
                </div>
            )}
            
            {!project && !fetchError ? (
                <p class="text-center text-red-500">Project not found or accessible.</p>
            ) : (
                <>
                    {message && (
                        <div class:list={['form-status-message', messageType === 'error' ? 'form-status-error' : 'form-status-success']}>
                            {message}
                        </div>
                    )}

                    <form method="POST" class="mt-xl" enctype="multipart/form-data">
                        <div class="form-group">
                            <label for="title" class="form-label">Project Title *</label>
                            <input type="text" id="title" name="title" required class="form-input" value={project?.title || ''} placeholder="e.g., Brand Identity for Acme Corp">
                        </div>

                        <div class="form-group">
                            <label for="description" class="form-label">Description</label>
                            <textarea id="description" name="description" class="form-textarea" placeholder="Detailed description of the project...">{project?.description || ''}</textarea>
                        </div>

                        <div class="form-group">
                            <label for="category_id" class="form-label">Category</label>
                            <select id="category_id" name="category_id" class="form-select">
                                <option value="">-- Select Category --</option>
                                {categories.map(category => (
                                    <option value={category.id} selected={project?.category_id === category.id}>{category.name}</option>
                                ))}
                            </select>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Current Image</label>
                            {project?.image_url ? (
                                <img src={getOptimizedImageUrl(project.image_url)} alt={project.title} class="thumbnail-preview mb-sm" />
                            ) : (
                                <p class="text-neutral-600 mb-sm">No image uploaded.</p>
                            )}
                            <input type="hidden" name="existing_image_url" value={project?.image_url || ''} />
                        </div>

                        <div class="form-group">
                            <label for="image" class="form-label">Upload New Image (optional)</label>
                            <input type="file" id="image" name="image" accept="image/*" class="form-input">
                        </div>

                        <div class="form-group">
                            <label for="display_order" class="form-label">Display Order</label>
                            <input type="number" id="display_order" name="display_order" value={project?.display_order || 0} class="form-input">
                        </div>

                        <div class="checkbox-group">
                            <input type="checkbox" id="is_published" name="is_published" class="form-checkbox" checked={project?.is_published || false}>
                            <label for="is_published">Publish Project</label>
                        </div>

                        <button type="submit" class="btn-primary-full-width mt-xl">Update Project</button>
                        <a href="/admin/projects" class="btn-secondary mt-md btn-full-width text-center" style="display: block; margin-top: var(--spacing-md);">Cancel</a>
                    </form>
                </>
            )}
        </div>
    </section>
</Layout>